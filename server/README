Server code for MSAG - Multiplayer Survival Adventure Game.

This is a C++ project. Just compile it with the Makefile - the executables (and shared objects for maps and stuff) will be in a new output/ directory. In the future I'll set up docker containers for cross-platform build as well.

To run this, just start the server executable in some directory where it can import map shared objects from a map/ directory and a mob/ directory. Or run it with the docker container. It'll save you a lot of headache.

Don't even try running this on windows. It won't work. It'll won't work really hilariously too.

Game states are stored as binary files in the games/ directory, you shouldn't touch stuff in there. The server will automatically generate/load game files when necessary.

Everything else is controlled by the REST API or websocket commands.


The REST API uses simple HTTP and a websocket upgrade endpoint (for gameplay). At the moment, there are,
 * GET /capabilities: dump server info. Clients should do this immediately on connecting to the server. It contains map data, mob data, and the global user cap. The response will be in JSON.
 * POST /newgame: Post data should contain JSON with a `room_name` property set to the name of your new game, a `map` property set to the name of the map you want to play, a `user_cap` number (which cannot be greater than the server's global user cap), an `allow_anonymous` boolean (controls whether anonymous players will be permitted to join), and a `require_review` boolean describing whether or not the room creator needs to manually accept new users. The response will contain a JSON object with a "root" user token (capable of accepting new users and such, does not have god powers) and a room_id - clients should automatically turn this into a "magic URL" or similar.
 * GET /room/<room>: Retrieve data on a room: name, map, player count and player cap. You can't join a room with maxed-out players. You *should* check this before connecting. 
 * GET /join/<room>/<username>/<password>: create a player in this room. If you are permitted to join this room, you will receive a user token in a json object. On some rooms, this doesn't necessarily mean you're actually able to join - you may need authorization from the room creator to 
 * GET /play/<room>: Join a room. If you don't have the user_token cookie set, you'll join anonymously and won't be able to save your progress (this is disabled in some rooms, which will simply return 403 Unauthorized). This is a websocket upgrade endpoint.